---
layout: post
title:  "React에서 기본 HOOK 사용하기"
date:   2024-08-13 19:04:19 +0900
categories: React
---

안녕하세요 한창 *React* 공부를 하고 있는 문소연입니다.

*React*를 조금이라도 해보신 분이라면 `Hook`에 대해 들어보셨을 것입니다. React Hooks는 함수형 컴포넌트에서 `상태(state)`와 `라이프사이클(lifecycle)` 기능을 사용할 수 있게 해주는 개념입니다.

**클래스형** 컴포넌트에서만 가능했던 여러 작업들을 **함수형** 컴포넌트에서도 가능하게 해주는 것입니다.

처음 *React*를 제대로 배워보며 `Hook` 사용법을 익히기 위해 여러 기초적인 컴포넌트들을 만들어보았습니다.  
이를 바탕으로 몸으로 직접 느낀 `useState`와 `useEffect` 사용법에 대해 설명하겠습니다.

*React*를 학습한 기간은 짧지만 지금껏 컴포넌트들을 만들며 가장 많이 사용되어지는 `Hooks`기에 `useState`와 `useEffect`를 선택하게 되었습니다.

---

### useState

**상태(state)** 를 함수형 컴포넌트에서 관리할 수 있게 해주는 `Hook`입니다.
초기 상태를 인수로 받아, **현재 상태**와 그 **상태를 갱신**할 수 있는 함수를 반환합니다.

***변수*** 라고 생각하시면 편합니다. 조건에 따라, 혹은 상태가 변화하는 값은 모두 `useState`를 통해 정의하면 됩니다.

예를 들어, 로그인 기능을 만들고자 합니다. 이 때 '*로그인*'버튼이 존재하겠죠! 그리고 로그인에 성공한다면 '*로그아웃*'의 버튼으로 **변경**이 되어야합니다.

```javascript
const [logButton, setLogButton] = useState('로그인');

if(로그인 성공)
{
    setLogButton('로그아웃');
}

return(
    <div>
        <button>{logButton}</button>
    </div>
);
```
이처럼 **변화될 값**인 로그인과 로그아웃을 `useState`로 정의합니다.

정의할 때에 `useState(초기값);`으로 정의해야 합니다. 따라서, 예시코드에서 버튼 초기값인 '로그인'으로 설정해주었습니다.
예시가 로그인이기에 '로그인' 이라는 `String값`을 사용하였지만 `int값`, `배열([])`, `객체({})`등 모든 type 정의가 가능합니다!

변수명은 `const[변수명,set변수명]` 형식으로 작성합니다. 예시코드에 따르면 변수명 `logButton`으로 설정하였고, set변수명 **(상태 업데이트 함수)** 의 첫 letter는 `setLogButton`과 같이 대문자로 작성해주셔야 합니다.

if문은 이해하기 편하도록 `if(로그인 성공)`으로 썼으나, 실제 로그인 로직에서는 버튼 `onClick`을 하였을 때 해당 이벤트 함수내에 `setLogButton`함수가 들어가면 됩니다.

이후, `return`내에 예시코드와 같이 정의한 변수를 사용하면 됩니다.

처음 `useState`를 접했을 때에는 '***변수***라고 생각하면 된다.' 라는 말도 잘 와닿지 않았습니다. 하지만 작은 컴포넌트들을 만들다 보니 자연스레 변수들을 `useState`로 정의하고 있었습니다. 이처럼 `useState`는 금방 익힐 수 있는 `Hook`입니다.

---

### useEffect

간단히 설명하자면 **사이드 이펙트**를 수행하기 위한 `Hook`입니다.
주로 데이터 가져오기, 구독 설정, DOM 업데이트와 같은 작업을 처리하는 데 사용됩니다.

`useEffect`를 사용하는데 주의해야할 점이 있습니다. 바로 실행되는 시점을 정의해주어야 하는 것입니다.

1. 재렌더링 될 때마다
2. 특정 상태가 업데이트 될 때마다
3. 처음 마운트 될 때 (한번)

에 따라 **연관배열**을 제대로 작성해주어야합니다.

1. useEffect(이펙트함수)
2. useEffect(이펙트함수,[의존성배열])
3. useEffect(이펙트함수,[])

다음과 같이 작성해주시면 됩니다.

이펙트함수만 적어준다는 의미는 해당 컴포넌트에서 **재렌더링**이 일어나는 **모든 순간**에  
*사이드 이펙트가 실행*된다는 것입니다.

여기서 **의존성배열**내에 *종속성변수*를 담아주어야 하는데요. 이는 쉽게 생각해 `state값`을 담아주면 됩니다.  
해당 변수의 값이 **하나라도 변경**되면 *사이드 이펙트가 실행*됩니다.

그리고 빈 배열을 작성한다는 것은 처음 **컴포넌트가 마운트** 될 때, **한 번** *사이드 이펙트가 실행*됩니다.

이처럼 사용 경우에 따라서 `useEffect` 훅을 적절하게 이용할 수 있습니다.


**사이드 이펙트** 라는 것을 언제 사용해야하나, 처음에는 감이 잘 오지 않았습니다.   
아무래도 가장 많이 사용되는 경우는 **비동기**로 처리되는 `state값`들을 **바로 이용**하고자 할 때 라고 생각합니다.

그 외에도 '이 변수가 업데이트 될 때 마다', 혹은 '처음 컴포넌트가 마운트 될 때' 이런 경우의 수를 생각한다면  
 **사이드 이펙트**에 쉽게 접근하실 수 있을 듯 합니다.

---

### 맺음말
React `Hooks`에는 정말 많은 기능을 가지고 있습니다.

1. useMemo()
2. useRef()
3. useCallback()
4. useReducer()
5. useContext()

등, `useState`와 `useEffect` 외에도 유용하게 쓰이는 `Hooks`가 많습니다.

[React 공식문서](https://react.dev/)를 참고하여 필요시 상황에 따라 다양한 `Hooks`를 공부하고 사용하시길 바랍니다.
